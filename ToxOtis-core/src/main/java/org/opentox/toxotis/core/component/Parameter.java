/*
 *
 * ToxOtis
 *
 * ToxOtis is the Greek word for Sagittarius, that actually means ‘archer’. ToxOtis
 * is a Java interface to the predictive toxicology services of OpenTox. ToxOtis is
 * being developed to help both those who need a painless way to consume OpenTox
 * services and for ambitious service providers that don’t want to spend half of
 * their time in RDF parsing and creation.
 *
 * Copyright (C) 2009-2010 Pantelis Sopasakis & Charalampos Chomenides
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Contact:
 * Pantelis Sopasakis
 * chvng@mail.ntua.gr
 * Address: Iroon Politechniou St. 9, Zografou, Athens Greece
 * tel. +30 210 7723236
 *
 */
package org.opentox.toxotis.core.component;

import com.hp.hpl.jena.datatypes.xsd.XSDDatatype;
import com.hp.hpl.jena.ontology.Individual;
import com.hp.hpl.jena.ontology.OntModel;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamWriter;
import org.opentox.toxotis.client.VRI;
import org.opentox.toxotis.core.IHTMLSupport;
import org.opentox.toxotis.core.OTComponent;
import org.opentox.toxotis.core.html.Alignment;
import org.opentox.toxotis.core.html.HTMLContainer;
import org.opentox.toxotis.core.html.HTMLDivBuilder;
import org.opentox.toxotis.core.html.HTMLTable;
import org.opentox.toxotis.core.html.HTMLUtils;
import org.opentox.toxotis.core.html.impl.HTMLTextImpl;
import org.opentox.toxotis.ontology.LiteralValue;
import org.opentox.toxotis.ontology.MetaInfo;
import org.opentox.toxotis.ontology.collection.OTClasses;
import org.opentox.toxotis.ontology.collection.OTDatatypeProperties;

/**
 * A parameter of an Algorithm characterized by its name, value and scope. Being an
 * OpenTox component it is also described by a set of meta information.
 *
 * @param <T>
 *      Datatype of the parameter's value.
 *
 * @author Pantelis Sopasakis
 * @author Charalampos Chomenides
 */
public class Parameter<T> extends OTComponent<Parameter<T>> implements IHTMLSupport {

    private String name;
    private static final int HASH_OFFSET = 7, HASH_MOD = 37;

    public void endowUri(final VRI baseUri) {
        if (super.getUri() == null) {
            setUri(new VRI(baseUri).augment("parameter", this.hashCode()));
        }
    }

    @Override
    public void writeRdf(XMLStreamWriter writer) throws XMLStreamException {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public HTMLContainer inHtml() {
        HTMLDivBuilder builder = new HTMLDivBuilder("jaqpot_model");
        builder.addComment("Parameter Representation automatically generated by ToxOtis");
        builder.addSubHeading("Parameter");
        builder.addSubSubHeading(getUri().toString());
        builder.getDiv().setAlignment(Alignment.justify).breakLine().horizontalSeparator();
        builder.addSubSubHeading("Information about the Parameter");
        builder.getDiv().breakLine().breakLine();

        HTMLTable infoTable = builder.addTable(2);

        String vri = getUri() != null ? getUri().toString() : null;
        infoTable.setAtCursor(new HTMLTextImpl("Parameter URI").formatBold(true)).setTextAtCursor(HTMLUtils.linkUrlsInText(vri)).
                setAtCursor(new HTMLTextImpl("Name").formatBold(true)).setTextAtCursor(getName().getValueAsString()).
                setAtCursor(new HTMLTextImpl("Value").formatBold(true)).setTextAtCursor(getValue().toString()).
                setAtCursor(new HTMLTextImpl("Type").formatBold(true)).setTextAtCursor(HTMLUtils.linkUrlsInText(getType().getURI())).
                setAtCursor(new HTMLTextImpl("Scope").formatBold(true)).setTextAtCursor(getScope().toString());
        infoTable.setCellPadding(5).
                setCellSpacing(2).
                setTableBorder(1).
                setColWidth(1, 250).
                setColWidth(2, 400);

        if (getMeta() != null && !getMeta().isEmpty()) {
            builder.addSubSubSubHeading("Meta Information");
            builder.addComponent(getMeta().inHtml());
        }

        builder.addParagraph("<small>Other Formats: "
                + "<a href=\"" + getUri() + "?media=application/rdf%2Bxml" + "\">RDF/XML</a>,"
                + "<a href=\"" + getUri() + "?media=application/x-turtle" + "\">Turtle</a>,"
                + "<a href=\"" + getUri() + "?media=text/n-triples" + "\">N-Triple</a>,"
                + "<a href=\"" + getUri() + "?media=text/uri-list" + "\">Uri-list</a>,"
                + "</small>", Alignment.left);

        return builder.getDiv();
    }

    /**
     * The scope of the parameter of an Algorithm that can either be {@link #MANDATORY Mandatory} or
     * {@link #OPTIONAL Optional}.
     */
    public enum ParameterScope {

        /**
         * If a parameter is tagged as 'Optional' then the client does not need to
         * provide its value explicitly but instead a default value will be used.
         */
        OPTIONAL,
        /**
         * A parameter is mandatory when the user has to provide it's value and no
         * default values can be assigned to it.
         */
        MANDATORY;
    };
    /** Typed value for the parameter */
    private LiteralValue<T> typedValue;
    /** The scope of the parameter (mandatory/optional)*/
    private ParameterScope scope;

    public Parameter() {
        super();
    }

    public Parameter(VRI uri) {
        super(uri);
    }

    public Parameter(String name, LiteralValue value) {
        super();
        this.name = name;
        this.typedValue = value;
        getMeta().addTitle(name);
    }

    public Parameter(VRI uri, String name, LiteralValue value) {
        super(uri);
        this.name = name;
        this.typedValue = value;
        getMeta().addTitle(name);
    }

    // <editor-fold defaultstate="collapsed" desc="Getters and Setters">
    public ParameterScope getScope() {
        return scope;
    }

    public Parameter<T> setScope(ParameterScope scope) {
        this.scope = scope;
        return this;
    }

    public XSDDatatype getType() {
        return this.typedValue.getType();
    }

    public T getValue() {
        return typedValue != null ? typedValue.getValue() : null;
    }

    public void setTypedValue(LiteralValue<T> value) {
        this.typedValue = value;
    }

    public LiteralValue<T> getTypedValue() {
        return typedValue;
    }

    /**
     * Is a proxy method for getting the dc:title of the Parameter (if any).
     *
     * @return
     *      Returns the title (name) of this parameter or <code>null</code> if
     *      not any.
     */
    public LiteralValue getName() {
        if (this.name != null) { // if someone has set the name using setName, use this value
            return new LiteralValue<String>(name, XSDDatatype.XSDstring);
        } else {//otherwise pick a name from getMeta().getTitles().
            if (getMeta() != null) {
                if (getMeta().getTitles() != null && !getMeta().getTitles().isEmpty()) {
                    LiteralValue val = getMeta().getTitles().iterator().next();
                    return val;
                }
            }
        }
        return null;
    }

    public Parameter setName(String name) {
        this.name = name;
        getMeta().addTitle(name);
        return this;
    }

// </editor-fold>
    
    @Override
    public Individual asIndividual(OntModel model) {

        Individual indiv = model.createIndividual(getUri() != null ? getUri().toString() : null, OTClasses.parameter().inModel(model));
        MetaInfo metaInfo = getMeta();
        if (metaInfo != null) {
            metaInfo.attachTo(indiv, model);
        }

        // scope
        if (getScope() != null) {
            indiv.addLiteral(OTDatatypeProperties.paramScope().asDatatypeProperty(model),
                    model.createTypedLiteral(getScope().toString(), XSDDatatype.XSDstring));
        }

        // value
        if (getValue() != null) {
            XSDDatatype xsdType = getType();
            if (xsdType == null) {
                xsdType = XSDDatatype.XSDstring;
            }
            indiv.addLiteral(OTDatatypeProperties.paramValue().asDatatypeProperty(model),
                    model.createTypedLiteral(getValue(), xsdType));
        }
        /*
         * Note: There is no ontological property for the name of the parameter
         * as it is considered to be redundant in light of dc:title. Use
         * DC properties instead. Notice that the method setName adds a title
         * for the parameter using the metaInfo of this parameter instance.
         */

        return indiv;
    }

    @Override
    public String toString() {
        StringBuilder builder = new StringBuilder();
        builder.append("Name  : ");
        builder.append(getName());
        builder.append("\n");
        builder.append("Value : ");
        builder.append(typedValue != null ? typedValue.getValue() : "-");
        builder.append("\n");
        builder.append("Scope : ");
        builder.append(scope);
        builder.append("\n");
        builder.append("Type  : ");
        builder.append(typedValue != null ? typedValue.getType() : "-");
        return new String(builder);
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }
        final Parameter<T> other = (Parameter<T>) obj;
        if (this.typedValue != other.typedValue && (this.typedValue == null || !this.typedValue.equals(other.typedValue))) {
            return false;
        }
        if (this.scope != other.scope && (this.scope == null || !this.scope.equals(other.scope))) {
            return false;
        }
        if (getName() != other.getName() && (getName() == null || !getName().equals(other.getName()))) {
            return false;
        }
        return true;
    }

    @Override
    public int hashCode() {
        int hash = HASH_OFFSET;
        hash = HASH_MOD * hash + (this.getName() != null ? this.getName().hashCode() : 0);
        hash = HASH_MOD * hash + (this.typedValue != null ? this.typedValue.hashCode() : 0);
        hash = HASH_MOD * hash + (this.scope != null ? this.scope.toString().hashCode() : 0);
        return hash;
    }
}
