#
# The MySQL database server configuration file.
#
# You can copy this to one of:
# - "/etc/mysql/my.cnf" to set global options,
# - "~/.my.cnf" to set user-specific options.
# 
# One can use all long options that the program supports.
# Run program with --help to get a list of available options and with
# --print-defaults to see which it would actually understand and use.
#
# For explanations see
# http://dev.mysql.com/doc/mysql/en/server-system-variables.html

# This will be passed to all mysql clients
# It has been reported that passwords should be enclosed with ticks/quotes
# escpecially if they contain "#" chars...
# Remember to edit /etc/mysql/debian.cnf when changing the socket location.
# Note that only client applications shipped by MySQL are guaranteed
# to read this section. If you want your own MySQL client program to
# honor these values, you need to specify it as an option during the
# MySQL client library initialization.
[client]
#password	= your_password
port		= 3306
socket		= /var/run/mysqld/mysqld.sock



#############################################################################


# Here is entries for some specific programs
# The following values assume you have at least 32M ram

# This was formally known as [safe_mysqld]. Both versions are currently parsed.
[mysqld_safe]
socket		= /var/run/mysqld/mysqld.sock
nice		= 0


#############################################################################


[mysqld]
#
# * Basic Settings
#


#
# * IMPORTANT
#   If you make changes to these settings and your system uses apparmor, you may
#   also need to also adjust /etc/apparmor.d/usr.sbin.mysqld.
#

user		= mysql
pid-file	= /var/run/mysqld/mysqld.pid
socket		= /var/run/mysqld/mysqld.sock
port		= 3306
basedir		= /usr
datadir		= /var/lib/mysql
tmpdir		= /tmp
skip-external-locking
#
# Instead of skip-networking the default is now to listen only on
# localhost which is more compatible and is not less secure.
bind-address		= 127.0.0.1
#
# * Fine Tuning
#

# Index blocks for MyISAM tables are buffered and are shared by all threads.
# key_buffer_size is the size of the buffer used for index blocks.
# The key buffer is also known as the key cache. 
# 25% of the machine's total memory is an acceptable value for this variable.
key_buffer_size = 256M


# Sort buffer is used to perform sorts for some ORDER BY and GROUP BY
# queries. If sorted data does not fit into the sort buffer, a disk
# based merge sort is used instead - See the "Sort_merge_passes"
# status variable. Allocated per thread if sort is needed.
# Each thread that needs to do a sort allocates a buffer of this size.
# Increase this value for faster ORDER BY or GROUP BY operations.
# Default: 2M
sort_buffer_size = 128M


# This buffer is used for the optimization of full JOINs (JOINs without
# indexes). Such JOINs are very bad for performance in most cases
# anyway, but setting this variable to a large value reduces the
# performance impact. See the "Select_full_join" status variable for a
# count of full JOINs. Allocated per thread if full join is found
join_buffer_size = 128M


# Each thread that does a sequential scan allocates a buffer of this size (in bytes)
# for each table it scans. If you do many sequential scans, you might want
# to increase this value, which defaults to 131072. The value of this variable
# should be a multiple of 4KB. If it is set to a value that is not a multiple of 4KB,
# its value will be rounded down to the nearest multiple of 4KB. 
# Default: 131072
read_buffer_size = 32M


# When reading rows in sorted order following a key-sorting operation, the rows are
# read through this buffer to avoid disk seeks. Setting the variable to a large value
# can improve ORDER BY performance by a lot. However, this is a buffer allocated for
# each client, so you should not set the global variable to a large value. Instead,
# change the session variable only from within those clients that need to run large queries. 
# Default: 262144
read_rnd_buffer_size = 32M


max_allowed_packet	= 64M

thread_stack		= 192K
# How many threads the server should cache for reuse. When a client disconnects,
# the client's threads are put in the cache if there are fewer than thread_cache_size
# threads there. Requests for threads are satisfied by reusing threads taken from the cache
# if possible, and only when the cache is empty is a new thread created. This variable can be
# increased to improve performance if you have a lot of new connections. (Normally, this
# doesn't provide a notable performance improvement if you have a good thread implementation.)
# Default: 0
thread_cache_size = 8

# This permits the application to give the threads system a hint for the
# desired number of threads that should be run at the same time.  This
# value only makes sense on systems that support the thread_concurrency()
# function call (Sun Solaris, for example).
# You should try [number of CPUs]*(2..4) for thread_concurrency
thread_concurrency = 8


# The amount of memory allocated for caching query results. The default value is 0, which
# disables the query cache. The allowable values are multiples of 1024; other values are
# rounded down to the nearest multiple. Note that query_cache_size bytes of memory are
# allocated even if query_cache_type is set to 0.
# Default: 0
query_cache_size = 0

# Set the query cache type. Setting the GLOBAL value sets the type for all clients that
# connect thereafter. Individual clients can set the SESSION value to affect their own
# use of the query cache.
#
# 0 or OFF 	Don't cache results in or retrieve results from the query cache. Note
#               that this does not deallocate the query cache buffer. To do that, you
#               should set query_cache_size to 0.
#
# 1 or ON 	Cache all cacheable query results except for those that begin with
#               SELECT SQL_NO_CACHE.
#
# 2 or DEMAND 	Cache results only for cacheable queries that begin with SELECT SQL_CACHE.
#
# Default: 1
query_cache_type = 0



# This replaces the startup script and checks MyISAM tables if needed
# the first time they are touched
myisam-recover         = BACKUP

# back_log is the number of connections the operating system can keep in
# the listen queue, before the MySQL connection manager thread has
# processed them. If you have a very high connection rate and experience
# "connection refused" errors, you might need to increase this value.
# Check your OS documentation for the maximum value of this parameter.
# Attempting to set back_log higher than your operating system limit
# will have no effect.
back_log = 50

# The maximum amount of concurrent sessions the MySQL server will
# allow. One of these connections will be reserved for a user with
# SUPER privileges to allow the administrator to login even if the
# connection limit has been reached.
max_connections = 1024


#table_cache            = 256




#############################################################################



#
# * InnoDB
#
# InnoDB is enabled by default with a 10MB datafile in /var/lib/mysql/.
# Read the manual for more InnoDB related options. There are many!

# InnoDB tries to keep the number of operating system threads concurrently inside InnoDB less than or
# equal to the limit given by this variable. Once the number of threads reaches this limit, additional
# threads are placed into a wait state within a FIFO queue for execution. Threads waiting for locks are
# not counted in the number of concurrently executing threads.
#
# The correct value for this variable is dependent on environment and workload. You will need to try
# a range of different values to determine what value works for your applications. A recommended value
# is 2 times the number of CPUs plus the number of disks. 
innodb_thread_concurrency = 6

innodb_doublewrite = true

# How long an InnoDB transaction should wait for a lock to be granted
# before being rolled back. InnoDB automatically detects transaction
# deadlocks in its own lock table and rolls back the transaction. If you
# use the LOCK TABLES command, or other transaction-safe storage engines
# than InnoDB in the same transaction, then a deadlock may arise which
# InnoDB cannot notice. In cases like this the timeout is useful to
# resolve the situation.
innodb_lock_wait_timeout = 120


# The size in bytes of the memory buffer InnoDB uses to cache data and indexes of its tables.
# The default value is 8MB. The larger you set this value, the less disk I/O is needed to access
# data in tables. On a dedicated database server, you may set this to up to 80% of the machine
# physical memory size. However, do not set it too large because competition for physical memory
# might cause paging in the operating system. Also, the time to initialize the buffer pool is
# roughly proportional to its size. On large installations, this initialization time may be
# significant. For example, on a modern Linux x86_64 server, initialization of a 10GB buffer
# pool takes approximately 6 seconds.
# Default: 8M
#innodb_buffer_pool_size = 512M


# If the value of innodb_flush_log_at_trx_commit is 0, the log buffer is written out to the log file
# once per second and the flush to disk operation is performed on the log file, but nothing is done
# at a transaction commit. When the value is 1 (the default), the log buffer is written out to the
# log file at each transaction commit and the flush to disk operation is performed on the log file.
# When the value is 2, the log buffer is written out to the file at each commit, but the flush to
# disk operation is not performed on it. However, the flushing on the log file takes place once
# per second also when the value is 2. Note that the once-per-second flushing is not 100% guaranteed
# to happen every second, due to process scheduling issues.
#
# The default value of 1 is the value required for ACID compliance. You can achieve better performance
# by setting the value different from 1, but then you can lose at most one second worth of transactions
# in a crash. With a value of 0, any mysqld process crash can erase the last second of transactions.
# With a value of 2, then only an operating system crash or a power outage can erase the last second
# of transactions. However, InnoDB's crash recovery is not affected and thus crash recovery does work
# regardless of the value.
#innodb_flush_log_at_trx_commit = 0






#############################################################################




#
# 		LOGGING
#
# * Logging and Replication
#
# Both location gets rotated by the cronjob.
# Be aware that this log type is a performance killer.
# As of 5.1 you can enable the log at runtime!
#general_log_file        = /var/log/mysql/mysql.log
#general_log             = 1
# Error logging goes to syslog due to /etc/mysql/conf.d/mysqld_safe_syslog.cnf.
#

# Log errors and startup messages to this file. If you omit the file name, MySQL uses
# host_name.err. If the file name has no extension, the server adds an extension of .err. 
log-error = /var/log/mysql/alphaville.err


# Print warnings to the error log file.  If you have any problem with
# MySQL you should enable logging of warnings and examine the error log
# for possible explanations.
log_warnings

# Log slow queries. Slow queries are queries which take more than the
# amount of time defined in "long_query_time" or which do not use
# indexes well, if log_short_format is not enabled. It is normally good idea
# to have this turned on if you frequently add new queries to the
# system.
#slow_query_log	
#slow_query_log_file = /var/log/mysql/mysql-slow.log

# All queries taking more than this amount of time (in seconds) will be
# trated as slow. Do not use "1" as a value here, as this will result in
# even very fast queries being logged from time to time (as MySQL
# currently measures time with second accuracy only).
#long_query_time = 2
#log-queries-not-using-indexes


#
# The following can be used as easy to replay backup logs or for replication.
# note: if you are setting up a replication slave, see README.Debian about
#       other settings you may need to change.
#server-id		= 1
#log_bin			= /var/log/mysql/mysql-bin.log
expire_logs_days	= 10
max_binlog_size         = 100M
#binlog_do_db		= include_database_name
#binlog_ignore_db	= include_database_name










#
# * Security Features
#
# Read the manual, too, if you want chroot!
# chroot = /var/lib/mysql/
#
# For generating SSL certificates I recommend the OpenSSL GUI "tinyca".
#
# ssl-ca=/etc/mysql/cacert.pem
# ssl-cert=/etc/mysql/server-cert.pem
# ssl-key=/etc/mysql/server-key.pem



[mysqldump]
quick
quote-names

[mysql]
#no-auto-rehash	# faster start of mysql but no tab completition

[isamchk]
key_buffer		= 16M

#
# * IMPORTANT: Additional settings that can override those from this file!
#   The files must end with '.cnf', otherwise they'll be ignored.
#
!includedir /etc/mysql/conf.d/
