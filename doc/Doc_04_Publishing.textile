h1. Publish your Component

h2. 1. POSTing a Component

p<>. A client can publish some OpenTox component, that is obtain a URI for its resource on some publicly available location, using the "POST":http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9.5 HTTP method. According to the OpenTox "REST API":http://opentox.org/dev/framework/restweb clients create new resources and acquire a URI for them by POSTing an RDF representation of these resources to an appropriate service. There are a couple of notes we need to make here. First, the entity is always "POSTed":http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9.5 as an "RDF":http://www.w3.org/RDF/ document containing all necessary information that describe the OpenTox component in a formal way according to the specifications of the "OpenTox ontology":http://opentox.org/data/documents/development/RDF%20files/OpenToxOntology/view . Second, as far as the service response is concerned, the following status codes are possible:

* "200":http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.1 A new resource is created; the URI(s) of the created resource(s) is(are) contained in the response body.
* "202":http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.3 An asynchronous job was initiated and a Task is returned to the client to monitor the progress of the procedure.
* "400":http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.1 The representation that was POSTed by the client is malformed (syntactic or semantic errors) or some other parameters in the request are inappropriate.
* "404":http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.5 The location at which the client attempted to POST the entity was not found on the server.
* "500":http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.5.1 Internal Server Error
* "503":http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.5.4 The service is temporarily unavailable: The resource is created but not yet available

Publishable components in ToxOtis subclass "OTPublishable":http://github.com/alphaville/ToxOtis/blob/master/src/org/opentox/toxotis/core/OTPublishable.java "(doc)":http://opentox.ntua.gr/toxotis/javadoc/org/opentox/toxotis/core/OTPublishable.html which defines two abstract methods: <code>Task publishOnline(VRI,AuthenticationToken)</code> and <code>Task publishOnline(AuthenticationToken)</code>. We copy here the documentation for the first of these two that allows users to POST their components to a specified server:

<pre>
/**
* Publish the component to a proper server identified by the uri of the
* publishing service provided in this method. The resource will be posted to the
* server in RDF format (Mediatype: application/rdf+xml).
* @param token
*      Provide an authentication token. If you think that the service does not
*      require auhtentication/authorization, you can leave this field <code>null</code> or
*      you can provide an empty authentication token.If the provided URI
*      already contains an authentication token (as the URL parameter <code>
*      tokenid</code>) it will be replaced by the new token provided to
*      this method.
* @return
*      A Task for monitoring the progress of your request. If the service
*      returns the URI of the resource right away and does not return a task,
*      then the object you will receive from this method will now have an identifier,
*      its status will be set to {@link Task.Status#COMPLETED }, its progress
*      will be set to <code>100%</code> and the URI of the created resource will
*      be available applying the method {@link Task#getResultUri() } on the returned
*      task. In any case, the service's response will be wrapped in a {@link Task }
*      object.
* @throws ToxOtisException
*      In case of invalid credentials, if the POSTed resource is not acceptable
*      by the remote service (returns a status code 400), communication error
*      occur with the remote server or other connection problems or the access
*      to the service was denied (401 or 403).
*/
public abstract Task publishOnline(VRI vri, AuthenticationToken token) throws ToxOtisException;
</pre>


h2. 2. Examples

h3. 2.1. Publish a Feature

Using the ToxOtis API, one can create a new feature and publish it to some feature server. Here is an example:

<pre>
Feature f = new Feature();
f.setUnits("m^4*mA*s^2*kg^-2");
f.getMeta().setTitle("Toxicity of my city");
f.getMeta().setHasSource("http://otherserver.net:8283/opentox/model/15451");
f.getMeta().setSameAs("http://www.youtube.com/watch?v=WMKmQmkJ9gg");
Task t = f.publishOnline(Services.AMBIT_UNI_PLOVDIV.augment("feature"), null);
System.out.println(t.getResultUri());
</pre>

This will print a "feature URI":http://ambit.uni-plovdiv.bg:8080/ambit2/feature/22210 to the standard output of your System.


h3. 2.2. Publish a bibliographic reference

We can publish a bibliographic reference as we did with features. Here is an example where a BibTeX object "(doc)":http://opentox.ntua.gr/toxotis/javadoc/org/opentox/toxotis/core/component/BibTeX.html is created and published online:

<pre>
BibTeX bib = new BibTeX(); // ...Create anonymous bibtex
bib.setAuthor("Chung W.");
bib.setTitle("The truth about UFOs");
bib.setVolume(100);
bib.setJournal("International Journal of Conspiracy Theory");
bib.setCrossref("http://localhost:3000/bibtex/549a9f40-9758-44b3-90fe-db31fe1a1a01");
bib.setBibType(BibTeX.BIB_TYPE.Article);
Task t = bib.publishOnline(Services.NTUA.augment("bibtex")), null);
</pre>


h3. 2.3. Publish a dataset

POSTing a dataset always creates a new resource. A task URI is usually returned to the the client (with HTTP status 202) for monitoring the progress of the uploading. In the following example a dataset is downloaded from a remote server and POSTed to some other dataset server. Particularly, only the first 5 compounds of the dataset are requested using the URL query <code>?max=N</code>.

<pre>
VRI vri = new VRI(Services.IDEACONSULT.augment("dataset", "54").addUrlParameter("max", "5"));
Dataset ds = new Dataset(vri).loadFromRemote();
Task t = ds.publishOnline(Services.AMBIT_UNI_PLOVDIV.augment("dataset"), null);
System.out.println(t.getHasStatus());
while (t.getHasStatus().equals(Task.Status.RUNNING)) {
     t.loadFromRemote();
     Thread.sleep(100);
}
System.out.println(t.getResultUri());
</pre>

The above example will POST the dataset as application/rdf+xml to the dataset server at "ambit.uni-plovdiv.bg":http://ambit.uni-plovdiv.bg:8080/ambit2/dataset and monitor the returned task. The dataset "http://ambit.uni-plovdiv.bg:8080/ambit2/dataset/64":http://ambit.uni-plovdiv.bg:8080/ambit2/dataset/64 has been created by running the above example code. 

In some cases it might be more convenient to get the background job as a <code>Future<VRI></code> instead of as a <code>Task</code> or even assign the background job to a certain <code>ExecutorService</code> of Java. So, ToxOtis provides the method <code>publish(VRI, AuthenticationToken): Future<VRI></code> that returns a Feature&lt;VRI&gt; for a Callable that runs on Single Thread Executor. Here is an example:

<pre>
VRI vri = new VRI(Services.ideaconsult().augment("dataset", "54").addUrlParameter("max", "5"));
Dataset ds = new Dataset(vri).loadFromRemote();        
Future<VRI> t = ds.publish(Services.ambitUniPlovdiv().augment("dataset"),(AuthenticationToken)null);
System.out.println(t.get());
</pre>

As already metntioned, users can assign the task to a certain ExecutorService "(doc)":http://download.oracle.com/javase/6/docs/api/java/util/concurrent/ExecutorService.html :

<pre>
ExecutorService myExecutor = Executors.newFixedThreadPool(10);
VRI vri = new VRI(Services.ideaconsult().augment("dataset", "54").addUrlParameter("max", "5"));
Dataset ds = new Dataset(vri).loadFromRemote();
Future<VRI> t = ds.publish(Services.ambitUniPlovdiv().augment("dataset"),
                     (AuthenticationToken)null, myExecutor);
while (!t.isDone()){
  // Do something while waiting for the result
}
vri result = t.get();
</pre>


h3. 2.4. Publish a compound

Publishing of compounds works exactly the same as it does for datasets and bibTex entries as already mentioned. However in case of compounds, users are additionaly able to create new compounds using "SD files":http://en.wikipedia.org/wiki/Chemical_table_file, "MOL files":http://en.wikipedia.org/wiki/Chemical_table_file, "SMILES":http://en.wikipedia.org/wiki/Simplified_molecular_input_line_entry_specification and other chemical formats. Such files are well known on the planet of chemo and bioinformatics and lots of scientists maintain databases of such files. The related method lies in CompoundFactory and is static since it is not an operation applied on some specific instance of Compound but in general creates a new compound on an online service. The output of this method is a Task that allows us to monitor the progress of upload. Here is an example of use where we create a new compound from an SD file:

<pre>
File myFile = new File("/path/to/opentoxin.sdf");
CompoundFactory factory = CompoundFactory.getInstance();
Task task = factory.publishFromFile(f, Media.CHEMICAL_MDLSDF.getMime(), (AuthenticationToken)null);
</pre>


