h1. Parse OpenTox Entities with ToxOtis

h2. 1. Introduction

p<>. Using ToxOtis one can parse remote OpenTox entities providing their URI or even OpenTox resources that are stored in some local file. Behind the scenes, ToxOtis downloads and parses an <a href="http://www.w3.org/RDF/">RDF</a> representation of the resource and parses it into some instance of <a href="http://github.com/alphaville/ToxOtis/blob/master/src/org/opentox/toxotis/core/OTOnlineResource.java">OTOnlineResource</a>. For this purpose, the user is endowed with two tools: The abstract method <code>loadFromRemote</code> defined in <a href="http://github.com/alphaville/ToxOtis/blob/master/src/org/opentox/toxotis/core/OTOnlineResource.java">OTOnlineResource</a> and a set of <a href="http://github.com/alphaville/ToxOtis/blob/master/src/org/opentox/toxotis/util/spiders/">spiders</a> which are more powerful tools but also require a higher level of acquaintance with RDF and <a href="http://sourceforge.net/projects/jena/files/Jena/Jena-2.6.2/jena-2.6.2.zip/download">Jena</a> (a library for parsing and editing RDF documents in Java). The ToxOtis API for downloading and parsing OpenTox resources is intertwined with the OpenTox A&A API, so in many cases users will need to provide their <a href="http://github.com/alphaville/ToxOtis/blob/master/doc/Doc_01_Login.textile">authentication token</a>.


h2. 2. Examples

p<>. Before proceeding to the next sections, users are adviced to take a look at the <a href="http://github.com/alphaville/ToxOtis/blob/master/doc/Doc_00_Components.textile">documentation</a> about the implementation of OpenTox components in ToxOtis.

h3. 2.1. Algorithms

p<>. A predefined collection of OpenTox algorithms is available within the class <a href="http://github.com/alphaville/ToxOtis/blob/master/src/org/opentox/toxotis/collection/OpenToxAlgorithms.java">OpenToxAlgorithms</a>. You can load the algorithm data from the remote location using the method <code>loadFromRemote</code> defined in <a href="http://github.com/alphaville/ToxOtis/blob/master/src/org/opentox/toxotis/core/Algorithm.java">Algorithm</a>. Here is an example:

<pre>
 Algorithm myAlg = new Algorithm(OpenToxAlgorithms.TUM_KNN_CLASSIFICATION.getServiceVri());
 // This will load into your object all information found at the remote location:
 myAlg.loadFromRemote();
 System.out.println(myAlg.getMeta());
</pre>

The above source code will print the following to the System standard output:

<pre>
identifier  : http://opentox.informatik.tu-muenchen.de:8080/OpenTox-dev/algorithm/kNNclassification^^string
title       : kNNclassification^^string
description : OpenTox REST interface to the WEKA k-Nearest Neighbor learning algorithm. 
              Can select appropriate value of K based on cross-validation. Can also do distance weighting.^^string
date        : Mon Sep 13 20:19:24 EEST 2010^^dateTime
creator     : tobias.girschick@in.tum.de^^string
</pre>

If the algorithm is a protected resource you will have to authenticate yourself against that algorithm service providing an <a href="http://github.com/alphaville/ToxOtis/blob/master/doc/Doc_01_Login.textile">authentication token</a>. Here is an example:

<pre>
 Algorithm myAlg = new Algorithm(OpenToxAlgorithms.NTUA_MLR.getServiceVri());
 AuthenticationToken at = PasswordFileManager.CRYPTO.authFromFile("./.secret/.my_secret.key");
 // This will load into your object all information found at the remote location:
 myAlg.loadFromRemote(at);
</pre>


h3. 2.2. Datasets

The following example illustates how to use a Dataset Spider to download and parse a dataset from a remote server:

<pre>
VRI vri = new VRI(Services.IDEACONSULT.augment("dataset","5"));
// Require that the dataset will contain no more than 10 compounds
final int size = 10;
vri.addUrlParameter("max", size);
DatasetSpider spider = new DatasetSpider(vri);
Dataset ds = spider.parse();
</pre>

Now we can use this Dataset object to inspect its dataentries and values:

<pre>
DataEntry de = ds.getDataEntries().get(2);
FeatureValue fv = de.getFeatureValue(0);
System.out.println(de.getConformer().getUri());
System.out.println(fv.getFeature().getUri() + " = " + fv.getValue());
</pre>

The above code will print the following message to the System's standard output:

<pre>
http://apps.ideaconsult.net:8080/ambit2/compound/2554/conformer/327497
http://apps.ideaconsult.net:8080/ambit2/feature/20083 = 100-01-6^^string
</pre>

Alternatively you can of course use the implementation of the method <code>loadFromRemote()</code> in <code>Dataset</code>. Here is an example:

<pre>
VRI vri = new VRI(Services.AMBIT_UNI_PLOVDIV.augment("dataset","9"));
Dataset ds = new Dataset(vri);
ds.loadFromRemote();
</pre>

This will parse into the object <code>ds</code> the data downloaded from the URI: <a href="http://ambit.uni-plovdiv.bg:8080/ambit2/dataset/9">ambit.uni-plovdiv.bg:8080/ambit2/dataset/9</a>.

h3. 2.3. Error Reports

Error Reports are part of the OpenTox API since version 1.1. Error Reports define a formal way to handle exceptional situations while invoking a service or during inter-service communication thus facilitating debugging. They are sufficiently documented online at <a href="http://opentox.org/dev/apis/api-1.1/Error%20Reports">opentox.org/dev/apis/api-1.1/Error Reports</a>. The parsing of Error Reports is carried out quite the same way as the entities mentioned above. The only difference with Error Reports is the the URL that hosts the error report differs from the IRI that describes the report in the RDF graph returned. So, if you choose to use a spider for parsing an Error Report you have to be careful with the initialization: The standard constructor for a spider <code>ErrorReportSpider(Resource resource, Model model)</code> will probably throw an error if you provide the wrong resource. This is why, you should prefer the constructor <code>ErrorReportSpider(URI actorUri, Model ontModel)</code> where you provide the URI of the actor of the exception and not the RDF node straightforward! Here is an example to obfuscate any misunderstanding:

<pre>
 VRI uri = new VRI(Services.NTUA.augment("algorithm", "mlr"));
 GetClient client = new GetClient();
 client.setUri(uri);
 OntModel model = client.getResponseOntModel();
 ErrorReportSpider spider = new ErrorReportSpider(uri, model);
 ErrorReport er = spider.parse();
</pre>

Error reports also appear in "ToxOtisException":http://github.com/alphaville/ToxOtis/blob/master/src/org/opentox/toxotis/ToxOtisException.java . When a ToxOtis Exception is thrown due to some exception thrown by a remote service, the Error Report from that service is incorporated into the exception. Here is an example:

<pre>
VRI uri = new VRI(Services.NTUA.augment("algorithm", "mlr"));
try {
     new AlgorithmSpider(uri);
} catch (ToxOtisException tox) {
     System.out.println(tox.getRemoteErrorReport());
}
</pre>

This will print to the System's output the following text:

<pre>
URI    : http://opentox.ntua.gr:3000/errorReport/#2390078396
Actor  : http://opentox.ntua.gr:3000/algorithm/mlr
Code   : AuthenticationFailed
Status : 403
</pre>

h3. 2.4. Models

This is an example of how a user can download and parse an OpenTox model from a remote location:

<pre>
VRI vri = new VRI(Services.NTUA.augment("model","f9a97443-6baf-4361-a55c-b08cf12c3e39"));
ModelSpider mSpider = new ModelSpider(vri);
Model m = mSpider.parse();
</pre>

The above code downloads the model from <a href="http://opentox.ntua.gr:3000/model/f9a97443-6baf-4361-a55c-b08cf12c3e39">opentox.ntua.gr</a> and creates the object <code>m: Model</code>. The same can be accomplished using a Model object exclusivle. Here is an alternative way:

<pre>
VRI vri = new VRI(Services.TUM_DEV.augment("model","TUMOpenToxModel_j48_7"));
Model m = new Model(vri);
m.loadFromRemote();
</pre>

