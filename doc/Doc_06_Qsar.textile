h1. Consuming OpenTox QSAR web services

QSAR services roughly include descriptor calculation, model training (regression/classification), prediction and dataset preprocessing (filtering, feature selection), so all boild down to the consumption of the Algorithm and Model web services of "OpenTox":http://opentox.org. However for the special case of descriptor caclulation we have implemented in ToxOtis a special interface, implemented by "Compound":https://github.com/alphaville/ToxOtis/blob/master/src/org/opentox/toxotis/core/component/Compound.java and "Dataset":https://github.com/alphaville/ToxOtis/blob/master/src/org/opentox/toxotis/core/component/Dataset.java. In what follows we provide examples on how to access QSAR-related web services.

h2. 1. Descriptor Calculation

  Descriptor calculation in ToxOtis is carried out using the methods defined in "IDescriptorCalculation":https://github.com/alphaville/ToxOtis/blob/master/src/org/opentox/toxotis/core/IDescriptorCalculation.java "(doc)":http://opentox.ntua.gr/toxotis/javadoc/org/opentox/toxotis/core/IDescriptorCalculation.html and also implemented in the abstract class "DescriptorCalculation":https://github.com/alphaville/ToxOtis/blob/master/src/org/opentox/toxotis/core/DescriptorCaclulation.java "(doc)":http://opentox.ntua.gr/toxotis/javadoc/org/opentox/toxotis/core/DescriptorCaclulation.html. In the following example, we calculate all physicochemical descriptors for the compound "http://apps.ideaconsult.net:8080/ambit2/compound/100":http://apps.ideaconsult.net:8080/ambit2/compound/100 using TUM's web service based on "CDK":http://sourceforge.net/projects/cdk/. 

<pre>
IDescriptorCalculation c = new Compound(Services.ideaconsult().augment("compound", 100));
Future<VRI> t = c.futureCDKPhysChemDescriptors(null, Services.ideaconsult().augment("dataset"));
</pre>

In the above case, the second line does not block execution, as it runs on a new thread (created by the method "futureCDKPhysChemDescriptors":http://opentox.ntua.gr/toxotis/javadoc/org/opentox/toxotis/core/DescriptorCaclulation.html#futureCDKPhysChemDescriptors%28org.opentox.toxotis.util.aa.AuthenticationToken,%20org.opentox.toxotis.client.VRI%29 ). Upon completion, a URI is returned pointing to the created dataset containing the submitted compound and all descriptors that could be calculated. Using this method the execution is carried out in the background and little is outputed about the progress of the asyncronous task (e.g. percentage of completion, etc). Some users might want to invoke the method "calculateDescriptors":http://opentox.ntua.gr/toxotis/javadoc/org/opentox/toxotis/core/DescriptorCaclulation.html#calculateDescriptors%28org.opentox.toxotis.client.VRI,%20org.opentox.toxotis.util.aa.AuthenticationToken,%20java.lang.String...%29 which returns a "Task":https://github.com/alphaville/ToxOtis/blob/master/src/org/opentox/toxotis/core/component/Task.java "(doc)":http://opentox.ntua.gr/toxotis/javadoc/org/opentox/toxotis/core/component/Task.html. One dataset that we created using the above code is:

<pre>
http://apps.ideaconsult.net:8080/ambit2/dataset/76440
</pre>

Note that no A&A was involved in the above procedure something that might be a requirement by some descriptor calculation services. In the following example, a dataset is created for the same compound employing a web service provided by "TUM":http://opentox.informatik.tu-muenchen.de:8080/OpenTox-dev/algorithm/JOELIB2 that calculated all "JoeLib":http://sourceforge.net/projects/joelib/ molecular descriptors.

<pre>
IDescriptorCalculation c = new Compound(Services.ideaconsult().augment("compound", 100));
Future<VRI> t = c.futureJoeLibDescriptors(null, Services.ideaconsult().augment("dataset"));
</pre>

As a result, one gets the URI of a dataset that contains the compound into consideration and all Joelib descriptors:

<pre>
http://apps.ideaconsult.net:8080/ambit2/dataset/76442
</pre>

h2. 2. Invoke an algorithm service

  For the time being, the only utility that is available for using OpenTox algorithms is the class "Trainer":https://github.com/alphaville/ToxOtis/blob/master/src/org/opentox/toxotis/training/Trainer.java (More tools will be provided in forthcoming versions of ToxOtis including tools for performing predictions). In order to use an algorithm service the user has to provide its URI, parametrize the algorithm and provide the URIs of the training dataset and the prediction feature. In the following example we use the algorithm "svm":http://opentox.ntua.gr:3000/algorithm/svm (running on the NTUA server) to train a predictive regression model:


<pre>
/*
 * Initialize and parametrize the algorithm you
 * want to use. Create a trainer.
 */
Algorithm alg = new Algorithm(Services.NtuaAlgorithms.mlr());
Parameter p1 = new Parameter("gamma", new LiteralValue(0.746));
Parameter p2 = new Parameter("cost", new LiteralValue(243.00));
alg.getParameters().add(p1);
alg.getParameters().add(p2);
Dataset ds = new Dataset(new VRI("http://apps.ideaconsult.net:8080/ambit2/dataset/6"));
Feature pf = new Feature(new VRI("http://apps.ideaconsult.net:8080/ambit2/feature/20180"));

Trainer trainer = new Trainer(alg, ds, pf);

/*
 * Create an authentication token with your 
 * credentials (use encrypted file for higher security)
 */
AuthenticationToken at =
                new AuthenticationToken(new java.io.File("/home/chung/toxotisKeys/my.key"));

/*
 * Have a task running and wait for the result
 */
Task task = trainer.train(at);// << Use your credentials here!
TaskRunner tr = new TaskRunner(task);
Future<Task> future = Executors.newSingleThreadExecutor().submit(tr);
Task completedTask = future.get();

/* 
 * Output the task's result (model URI).
 */
System.out.println(completedTask.getResultUri());
</pre>

Upon completion the model's URI will be printed on your System's output:

<pre>
http://opentox.ntua.gr:3000/model/0253cde2-9d22-43c2-b9ef-e3887e69f61e
</pre>

You can use a parser to load the created model:

<pre>
Model model = new Model(completedTask.getResultUri());
model.loadFromRemote();
</pre>
  


h2. 3. References

# "ARFF files":http://www.cs.waikato.ac.nz/~ml/weka/arff.html
# "OpenTox API version 1.2":http://opentox.org/dev/apis/api-1.2
# "Chemistry Development Kit":http://sourceforge.net/projects/cdk/
# "JoeLib project":http://sourceforge.net/projects/joelib/
# "Algorithm services provided by NTUA":http://opentox.ntua.gr:3000/algorithm, "TUM":http://opentox.informatik.tu-muenchen.de:8080/OpenTox-dev/algorithm and "IDEA":http://apps.ideaconsult.net:8080/ambit2/algorithm



